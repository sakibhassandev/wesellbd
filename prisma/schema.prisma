generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

enum OrderStatus {
    PENDING
    PROCESSING
    SHIPPED
    DELIVERED
    CANCELLED
}

enum DiscountType {
    PERCENTAGE
    FIXED
}

enum paymentMethod {
    COD
    BKASH
}

model User {
    id        String   @id @map("_id")
    firstName String
    lastName  String
    email     String   @unique
    imageUrl  String
    cartItems Json     @default("{}")
    Reviews   Review[]
    orders    Order[]
    createdAt DateTime @default(now())
}

model Product {
    id          String           @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    slug        String           @unique
    description String
    basePrice   Float
    brand       String?
    images      String[]
    tags        String[]
    rating      Float?
    isFeatured  Boolean          @default(false)
    categoryId  String           @db.ObjectId
    category    Category         @relation(fields: [categoryId], references: [id])
    variants    ProductVariant[]
    reviews     Review[]
    orderItems  OrderItem[]
}

model Category {
    id       String    @id @default(auto()) @map("_id") @db.ObjectId
    name     String
    slug     String    @unique
    products Product[]
}

model ProductVariant {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    productId String   @db.ObjectId
    product   Product  @relation(fields: [productId], references: [id])
    option    String
    stock     Int
    price     Float?
    image     String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Review {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    productId String   @db.ObjectId
    product   Product  @relation(fields: [productId], references: [id])
    userId    String
    user      User     @relation(fields: [userId], references: [id])
    rating    Int
    comment   String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Order {
    id             String        @id @default(auto()) @map("_id") @db.ObjectId
    userId         String
    user           User          @relation(fields: [userId], references: [id])
    items          OrderItem[]
    status         OrderStatus   @default(PENDING)
    totalAmount    Float
    discountAmount Float         @default(0)
    address        String
    paymentMethod  paymentMethod
    couponId       String?       @db.ObjectId
    coupon         Coupon?       @relation(fields: [couponId], references: [id])
    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt
}

model OrderItem {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    order      Order    @relation(fields: [orderId], references: [id])
    orderId    String   @db.ObjectId
    product    Product  @relation(fields: [productId], references: [id])
    productId  String   @db.ObjectId
    quantity   Int
    price      Float
    totalPrice Float
    createdAt  DateTime @default(now())
}

model Coupon {
    id            String       @id @default(auto()) @map("_id") @db.ObjectId
    code          String       @unique
    discountType  DiscountType
    discountValue Float
    maxUsage      Int?
    usedCount     Int          @default(0)
    expiresAt     DateTime?
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt
    orders        Order[]
}
